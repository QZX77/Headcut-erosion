# 加载用户提供的数据文件
file_path = '/mnt/data/data.txt'

# 读取数据
data = pd.read_csv(file_path, delim_whitespace=True)

# 提取数据
Da = data['Da'].values
pis = data[['pi1', 'pi2', 'pi3', 'pi4']].values
tau = data['tau'].values
h = data['h'].values
Bw = data['Bw'].values
Dp = data['Dp'].values

# 无量纲组合
ratio1 = (Bw - h) / Dp
ratio2 = (Bw - h) / Bw

# 定义 tauRel 计算函数
def calculate_tauRel(Da, pis, tau, exps, coef):
    tau_max = 1000 * 9.8 * Da * coef * pis[:, 0]**exps[0] * pis[:, 1]**exps[1] * pis[:, 2]**exps[2] * pis[:, 3]**exps[3]
    tauRel = tau / tau_max
    return np.clip(tauRel, 0, 1)  # 保证 tauRel 小于等于 1

# 优化函数
def optimize_and_plot(initial_params, ratio):
    # 优化
    res = minimize(optimize_function, initial_params, args=(Da, pis, tau, ratio))
    optimized_params = res.x

    # 使用优化后的参数计算 tauRel
    optimized_exps = optimized_params[:4]
    optimized_coef = optimized_params[4]
    tauRel_optimized = calculate_tauRel(Da, pis, tau, optimized_exps, optimized_coef)

    # 绘图
    plt.scatter(tauRel_optimized, ratio, label='Data Points')
    plt.plot(tauRel_optimized, ratio, label='Predicted Curve')
    plt.xlabel('tauRel')
    plt.ylabel('Ratio')
    plt.title('tauRel vs. Ratio')
    plt.legend()
    plt.grid(True)
    plt.show()

    return optimized_params, res.fun

# 初始参数
initial_params = np.random.rand(5)

# 进行优化并绘图
print("Optimizing for (Bw - h) / Dp:")
params1, cost1 = optimize_and_plot(initial_params, ratio1)
print("Optimized Parameters:", params1)
print("Cost:", cost1)

print("\nOptimizing for (Bw - h) / Bw:")
params2, cost2 = optimize_and_plot(initial_params, ratio2)
print("Optimized Parameters:", params2)
print("Cost:", cost2)








from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import PolynomialFeatures

# 为了简化模型，尝试使用多项式回归

def polynomial_regression(x, y, degree):
    """
    多项式回归函数。
    :param x: 自变量数据。
    :param y: 因变量数据。
    :param degree: 多项式的度。
    :return: 模型的预测结果和均方误差。
    """
    # 将 x 转换为多项式特征
    poly = PolynomialFeatures(degree=degree)
    x_poly = poly.fit_transform(x.reshape(-1, 1))

    # 创建并拟合模型
    model = LinearRegression()
    model.fit(x_poly, y)

    # 预测
    y_pred = model.predict(x_poly)

    # 计算均方误差
    mse = mean_squared_error(y, y_pred)

    return y_pred, mse

# 使用多项式回归进行优化和绘图

# 多项式度数
degree = 2

# (Bw - h) / Dp
y_pred1, mse1 = polynomial_regression(ratio1, tauRel_optimized, degree)

# (Bw - h) / Bw
y_pred2, mse2 = polynomial_regression(ratio2, tauRel_optimized, degree)

# 绘制图形
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.scatter(tauRel_optimized, ratio1, label='Data Points')
plt.plot(tauRel_optimized, y_pred1, color='red', label='Polynomial Regression')
plt.xlabel('tauRel')
plt.ylabel('(Bw - h) / Dp')
plt.title('Polynomial Regression: tauRel vs. (Bw - h) / Dp')
plt.legend()
plt.grid(True)

plt.subplot(1, 2, 2)
plt.scatter(tauRel_optimized, ratio2, label='Data Points')
plt.plot(tauRel_optimized, y_pred2, color='red', label='Polynomial Regression')
plt.xlabel('tauRel')
plt.ylabel('(Bw - h) / Bw')
plt.title('Polynomial Regression: tauRel vs. (Bw - h) / Bw')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

mse1, mse2

